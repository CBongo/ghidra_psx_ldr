define pcodeop gte_ldv0;
define pcodeop gte_ldv01;
define pcodeop gte_ldv1;
define pcodeop gte_ldv2;
define pcodeop gte_ldv3;
define pcodeop gte_ldv3c;
define pcodeop gte_ldv3c_vertc;
define pcodeop gte_ldv01c;
define pcodeop gte_ldrgb;
define pcodeop gte_ldrgb3;
define pcodeop gte_ldrgb3c;
define pcodeop gte_ldlv0;
define pcodeop gte_ldlv1;
define pcodeop gte_ldsv;
define pcodeop gte_ldbv;
define pcodeop gte_ldcv;
define pcodeop gte_ldclmv;
define pcodeop gte_lddp;
define pcodeop gte_ldsxy0;
define pcodeop gte_ldsxy1;
define pcodeop gte_ldsxy2;
define pcodeop gte_ldsxy3;
define pcodeop gte_ldsxy3c;
define pcodeop gte_ldsz3;
define pcodeop gte_ldsz4;
define pcodeop gte_ldopv1;
define pcodeop gte_ldopv2;
define pcodeop gte_ldlzc;
define pcodeop gte_SetRGBcd;
define pcodeop gte_ldbkdir;
define pcodeop gte_SetBackColor;
define pcodeop gte_ldfcdir;
define pcodeop gte_SetFarColor;
define pcodeop gte_SetGeomOffset;
define pcodeop gte_SetGeomScreen;
define pcodeop gte_ldsvrtrow0;
define pcodeop gte_SetRotMatrix;
define pcodeop gte_ldsvllrow0;
define pcodeop gte_SetLightMatrix;
define pcodeop gte_ldsvlcrow0;
define pcodeop gte_SetColorMatrix;
define pcodeop gte_SetTransMatrix;
define pcodeop gte_ldtr;
define pcodeop gte_SetTransVector;
define pcodeop gte_ld_intpol_uv0;
define pcodeop gte_ld_intpol_uv1;
define pcodeop gte_ld_intpol_bv0;
define pcodeop gte_ld_intpol_bv1;
define pcodeop gte_ld_intpol_sv0;
define pcodeop gte_ld_intpol_sv1;
define pcodeop gte_ldfc;
define pcodeop gte_ldopv2SV;
define pcodeop gte_ldopv1SV;

define pcodeop gte_stsxy;
define pcodeop gte_stsxy3;
define pcodeop gte_stsxy3c;
define pcodeop gte_stsxy2;
define pcodeop gte_stsxy1;
define pcodeop gte_stsxy0;
define pcodeop gte_stsxy01;
define pcodeop gte_stsxy01c;
define pcodeop gte_stsxy3_f3;
define pcodeop gte_stsxy3_g3;
define pcodeop gte_stsxy3_ft3;
define pcodeop gte_stsxy3_gt3;
define pcodeop gte_stsxy3_f4;
define pcodeop gte_stsxy3_g4;
define pcodeop gte_stsxy3_ft4;
define pcodeop gte_stsxy3_gt4;
define pcodeop gte_stdp;
define pcodeop gte_stflg;
define pcodeop gte_stflg_4;
define pcodeop gte_stsz;
define pcodeop gte_stsz3;
define pcodeop gte_stsz4;
define pcodeop gte_stsz3c;
define pcodeop gte_stsz4c;
define pcodeop gte_stszotz;
define pcodeop gte_stotz;
define pcodeop gte_stopz;
define pcodeop gte_stlvl;
define pcodeop gte_stlvnl;
define pcodeop gte_stlvnl0;
define pcodeop gte_stlvnl1;
define pcodeop gte_stlvnl2;
define pcodeop gte_stsv;
define pcodeop gte_stclmv;
define pcodeop gte_stbv;
define pcodeop gte_stcv;
define pcodeop gte_strgb;
define pcodeop gte_strgb3;
define pcodeop gte_strgb3_g3;
define pcodeop gte_strgb3_gt3;
define pcodeop gte_strgb3_g4;
define pcodeop gte_strgb3_gt4;
define pcodeop gte_ReadGeomOffset;
define pcodeop gte_ReadGeomScreen;
define pcodeop gte_ReadRotMatrix;
define pcodeop gte_sttr;
define pcodeop gte_ReadLightMatrix;
define pcodeop gte_ReadColorMatrix;
define pcodeop gte_stlzc;
define pcodeop gte_stfc;
define pcodeop gte_mvlvtr;
define pcodeop gte_nop;
define pcodeop gte_subdvl;
define pcodeop gte_subdvd;
define pcodeop gte_adddvl;
define pcodeop gte_adddvd;
define pcodeop gte_FlipRotMatrixX;
define pcodeop gte_FlipTRX;


is_lwc2: is $(AMODE) & REL6=0 & prime=0x32 {}
is_lhu:  is $(AMODE) & prime=0x25 {}
is_sra:  is $(AMODE) & prime=0 & fct=3 & rs=0 & RD {}
is_sll:  is $(AMODE) & prime=0 & fct=0 & rs=0 & RD {}
is_srl:  is $(AMODE) & prime=0 & fct=2 & rs=0 & RD {}
is_or:   is $(AMODE) & prime=0 & fct=0x25 & sa=0 {}
is_mtc2: is $(AMODE) & prime=0x12 & copop=4 {}
is_lbu:  is $(AMODE) & prime=0x24 {}
is_lh:   is $(AMODE) & prime=0x21 {}
is_sb:   is $(AMODE) & prime=0x28 {}
is_sh:   is $(AMODE) & prime=0x29 {}
is_lw:   is $(AMODE) & prime=0x23 {}
is_sw:   is $(AMODE) & prime=0x2B {}
is_ctc2: is $(AMODE) & prime=0x12 & copop=6 {}
is_swc2: is $(AMODE) & prime=0x3A {}
is_cfc2: is $(AMODE) & prime=0x12 & copop=2 {}
is_and:  is $(AMODE) & prime=0 & fct=0x24 & sa=0 {}
is_subu: is $(AMODE) & prime=0 & fct=0x23 & sa=0 & RD {}
is_addu: is $(AMODE) & prime=0 & fct=0x21 & sa=0 & RD {}
is_addi: is $(AMODE) & REL6=0 & prime=8 & RT {}
is_mfc2: is $(AMODE) & prime=0x12 & copop=0 {}

@include "cop2_regs.sinc"

lhu_12_0: is is_lhu & OFF_BASE & simmed=0 & rt=12 {}

lhu_13_2: is is_lhu & OFF_BASE & simmed=2 & rt=13 {}
lhu_13_4: is is_lhu & OFF_BASE & simmed=4 & rt=13 {}
lhu_13_6: is is_lhu & OFF_BASE & simmed=6 & rt=13 {}

lhu_14_4: is is_lhu & OFF_BASE & simmed=4 & rt=14 {}
lhu_14_12: is is_lhu & OFF_BASE & simmed=12 & rt=14 {}

sra_12_12_2: is is_sra & rd=12 & rt=12 & sa=2 {}
sra_12_12_16: is is_sra & rd=12 & rt=12 & sa=16 {}
sra_13_13_16: is is_sra & rd=13 & rt=13 & sa=16 {}
sra_14_14_16_1: is is_sra & rd1=14 & rt1=14 & sa_1=16 {}
sra_14_14_16_2: is is_sra & rd2=14 & rt2=14 & sa_2=16 {}
sra_15_12_16: is is_sra & rd=15 & rt=12 & sa=16 {}
sra_15_13_16: is is_sra & rd=15 & rt=13 & sa=16 {}
sll_12_x_4: is is_sll & rd=12 & sa=4 {}
sll_12_x_16: is is_sll & rd=12 & sa=16 {}
sll_13_x_4: is is_sll & rd=13 & sa=4 {}
sll_13_x_16: is is_sll & rd=13 & sa=16 {}
sll_13_13_16: is is_sll & rd=13 & rt=13 & sa=16 {}
sll_14_12_16: is is_sll & rd=14 & rt=12 & sa=16 {}
sll_14_13_16: is is_sll & rd=14 & rt=13 & sa=16 {}
sll_14_14_16_1: is is_sll & rd1=14 & rt1=14 & sa_1=16 {}
sll_14_14_16_2: is is_sll & rd2=14 & rt2=14 & sa_2=16 {}
sll_15_15_16_1: is is_sll & rd1=15 & rt1=15 & sa_1=16 {}
sll_15_15_16_2: is is_sll & rd2=15 & rt2=15 & sa_2=16 {}
sll_14_x_4: is is_sll & rd=14 & sa=4 {}
srl_14_14_16_1: is is_srl & rd1=14 & rt1=14 & sa_1=16 {}
srl_14_14_16_2: is is_srl & rd2=14 & rt2=14 & sa_2=16 {}

or_12_12_13: is is_or & rd=12 & rs=12 & rt=13 {}
or_14_14_15_1: is is_or & rd1=14 & rs1=14 & rt1=15 {}
or_14_14_15_2: is is_or & rd2=14 & rs2=14 & rt2=15 {}

lbu_12_0: is is_lbu & rt=12 & OFF_BASE & simmed=0 {}
lbu_13_1: is is_lbu & rt=13 & OFF_BASE & simmed=1 {}
lbu_14_2: is is_lbu & rt=14 & OFF_BASE & simmed=2 {}

lh_12_0: is is_lh & rt=12 & OFF_BASE & simmed=0 {}
lh_13_2: is is_lh & rt=13 & OFF_BASE & simmed=2 {}
lh_14_4: is is_lh & rt=14 & OFF_BASE & simmed=4 {}

sb_12_0: is is_sb & rt=12 & OFF_BASE & simmed=0 {}
sb_13_1: is is_sb & rt=13 & OFF_BASE & simmed=1 {}
sb_14_2: is is_sb & rt=14 & OFF_BASE & simmed=2 {}

sh_12_0: is is_sh & rt=12 & OFF_BASE & simmed=0 {}
sh_13_2: is is_sh & rt=13 & OFF_BASE & simmed=2 {}
sh_13_6: is is_sh & rt=13 & OFF_BASE & simmed=6 {}
sh_14_4: is is_sh & rt=14 & OFF_BASE & simmed=4 {}
sh_14_12: is is_sh & rt=14 & OFF_BASE & simmed=12 {}
sh_15_2: is is_sh & rt=15 & OFF_BASE & simmed=2 {}

lw_12_0: is is_lw & rt=12 & OFF_BASE & simmed=0 {}
lw_12_8: is is_lw & rt=12 & OFF_BASE & simmed=8 {}
lw_12_20: is is_lw & rt=12 & OFF_BASE & simmed=20 {}

lw_13_0: is is_lw & rt=13 & OFF_BASE & simmed=0 {}
lw_13_4: is is_lw & rt=13 & OFF_BASE & simmed=4 {}
lw_13_12: is is_lw & rt=13 & OFF_BASE & simmed=12 {}
lw_13_24: is is_lw & rt=13 & OFF_BASE & simmed=24 {}

lw_14_8: is is_lw & rt=14 & OFF_BASE & simmed=8 {}
lw_14_16: is is_lw & rt=14 & OFF_BASE & simmed=16 {}
lw_14_28: is is_lw & rt=14 & OFF_BASE & simmed=28 {}

sw_12_0: is is_sw & rt=12 & OFF_BASE & simmed=0 {}
sw_12_8: is is_sw & rt=12 & OFF_BASE & simmed=8 {}
sw_12_20: is is_sw & rt=12 & OFF_BASE & simmed=20 {}

sw_13_0: is is_sw & rt=13 & OFF_BASE & simmed=0 {}
sw_13_4: is is_sw & rt=13 & OFF_BASE & simmed=4 {}
sw_13_12: is is_sw & rt=13 & OFF_BASE & simmed=12 {}
sw_13_24: is is_sw & rt=13 & OFF_BASE & simmed=24 {}

sw_14_8: is is_sw & rt=14 & OFF_BASE & simmed=8 {}
sw_14_16: is is_sw & rt=14 & OFF_BASE & simmed=16 {}
sw_14_28: is is_sw & rt=14 & OFF_BASE & simmed=28 {}

sw_15_4: is is_sw & rt=15 & OFF_BASE & simmed=4 {}


and_12_12_13: is is_and & rd=12 & rs=12 & rt=13 {}
subu_12_0_12: is is_subu & rd=12 & rs=0 & rt=12 {}
subu_12_12_13: is is_subu & rd=12 & rs=12 & rt=13 {}
subu_14_0_14_1: is is_subu & rd1=14 & rs1=0 & rt1=14 {}
subu_14_0_14_2: is is_subu & rd2=14 & rs2=0 & rt2=14 {}
subu_15_0_15: is is_subu & rd=15 & rs=0 & rt=15 {}
subu_15_12_13: is is_subu & rd=15 & rs=12 & rt=13 {}
addu_12_12_13: is is_addu & rd=12 & rs=12 & rt=13 {}
addu_15_12_13: is is_addu & rd=15 & rs=12 & rt=13 {}
addi_13_0_4: is is_addi & rt=13 & rs=0 & simmed=4 {}

:ldv0 base is lwc2_0_0 & base; lwc2_1_4 {
	gte_ldv0(base);
}

:ldv1 base is lwc2_2_0 & base; lwc2_3_4 {
	gte_ldv1(base);
}

:ldv2 base is lwc2_4_0 & base; lwc2_5_4 {
	gte_ldv2(base);
}

:ldv3 base1,base2,base3 is lwc2_0_0 & base1; lwc2_1_4; lwc2_2_0 & base2; lwc2_3_4; lwc2_4_0 & base3; lwc2_5_4 {
	gte_ldv3(base1,base2,base3);
}

:ldv3c base is lwc2_0_0 & base; lwc2_1_4; lwc2_2_8; lwc2_3_12; lwc2_4_16; lwc2_5_20 {
	gte_ldv3c(base);
}

:ldv3c_vertc base is lwc2_0_0 & base; lwc2_1_4; lwc2_2_12; lwc2_3_16; lwc2_4_24; lwc2_5_28 {
	gte_ldv3c_vertc(base);
}

:ldv01 base1,base2 is lwc2_0_0 & base1; lwc2_1_4; lwc2_2_0 & base2; lwc2_3_4 {
	gte_ldv01(base1,base2);
}

:ldv01c base is lwc2_0_0 & base; lwc2_1_4; lwc2_2_8; lwc2_3_12 {
	gte_ldv01c(base);
}

:ldrgb base is lwc2_6_0 & base {
	gte_ldrgb(base);
}

:ldrgb3 base1,base2,base3 is lwc2_20_0 & base1; lwc2_21_0 & base2; lwc2_22_0 & base3; lwc2_6_0 {
	gte_ldrgb3(base1,base2,base3);
}

:ldrgb3c base is lwc2_20_0 & base; lwc2_21_4; lwc2_22_8; lwc2_6_8 {
	gte_ldrgb3c(base);
}

:ldlv0 base is lhu_13_4 & base; lhu_12_0; sll_13_13_16; or_12_12_13; mtc2_12_0; lwc2_1_8 {
	gte_ldlv0(base);
}

:ldlv1 base is lwc2_9_0 & base; lwc2_10_4; lwc2_11_8 {
	gte_ldlv1(base);
}

:ldsv base is lhu_12_0 & base; lhu_13_2; lhu_14_4; mtc2_12_9; mtc2_13_10; mtc2_14_11 {
	gte_ldsv(base);
}

:ldbv base is lbu_12_0 & base; lbu_13_1; mtc2_12_9; mtc2_13_10 {
	gte_ldbv(base);
}

:ldcv base is lbu_12_0 & base; lbu_13_1; lbu_14_2; mtc2_12_9; mtc2_13_10; mtc2_14_11 {
	gte_ldcv(base);
}

:ldclmv base is lhu_12_0 & base; lhu_13_6; lhu_14_12; mtc2_12_9; mtc2_13_10; mtc2_14_11 {
	gte_ldclmv(base);
}

:ldsxy3 RTsrc1,RTsrc2,RTsrc3 is mtc2_x_12 & RTsrc1; mtc2_x_14 & RTsrc2; mtc2_x_13 & RTsrc3 {
	gte_ldsxy3(RTsrc1,RTsrc2,RTsrc3);
}

:ldsxy3c base is lwc2_12_0 & base; lwc2_13_4; lwc2_14_8 {
	gte_ldsxy3c(base);
}

:ldsz3 RTsrc1,RTsrc2,RTsrc3 is mtc2_x_17 & RTsrc1; mtc2_x_18 & RTsrc2; mtc2_x_19 & RTsrc3 {
	gte_ldsz3(RTsrc1,RTsrc2,RTsrc3);
}

:ldsz4 RTsrc1,RTsrc2,RTsrc3,RTsrc4 is mtc2_x_16 & RTsrc1; mtc2_x_17 & RTsrc2; mtc2_x_18 & RTsrc3; mtc2_x_19 & RTsrc4 {
	gte_ldsz4(RTsrc1,RTsrc2,RTsrc3,RTsrc4);
}

:ldopv1 base is lw_12_0 & base; lw_13_4; ctc2_12_0; lw_14_8; ctc2_13_2; ctc2_14_4 {
	gte_ldopv1(base);
}

:ldopv2 base is lwc2_11_8 & base; lwc2_9_0; lwc2_10_4 {
	gte_ldopv2(base);
}

:ldbkdir RTsrc1,RTsrc2,RTsrc3 is ctc2_x_13 & RTsrc1; ctc2_x_14 & RTsrc2; ctc2_x_15 & RTsrc3 {
	gte_ldbkdir(RTsrc1,RTsrc2,RTsrc3);
}

:SetBackColor RTsrc1,RTsrc2,RTsrc3 is sll_12_x_4 & RTsrc1; sll_13_x_4 & RTsrc2; sll_14_x_4 & RTsrc3; ctc2_12_13; ctc2_13_14; ctc2_14_15 {
	gte_SetBackColor(RTsrc1,RTsrc2,RTsrc3);
}

:ldfcdir RTsrc1,RTsrc2,RTsrc3 is ctc2_x_21 & RTsrc1; ctc2_x_22 & RTsrc2; ctc2_x_23 & RTsrc3 {
	gte_ldfcdir(RTsrc1,RTsrc2,RTsrc3);
}

:SetFarColor RTsrc1,RTsrc2,RTsrc3 is sll_12_x_4 & RTsrc1; sll_13_x_4 & RTsrc2; sll_14_x_4 & RTsrc3; ctc2_12_21; ctc2_13_22; ctc2_14_23 {
	gte_SetFarColor(RTsrc1,RTsrc2,RTsrc3);
}

:SetGeomOffset RTsrc1,RTsrc2 is sll_12_x_16 & RTsrc1; sll_13_x_16 & RTsrc2; ctc2_12_24; ctc2_13_25 {
	gte_SetGeomOffset(RTsrc1,RTsrc2);
}

:ldsvrtrow0 base is lw_12_0 & base; lw_13_4; ctc2_12_0; ctc2_13_1 {
	gte_ldsvrtrow0(base);
}

:SetRotMatrix base is lw_12_0 & base; lw_13_4; ctc2_12_0; ctc2_13_1; lw_12_8; lw_13_12; lw_14_16; ctc2_12_2; ctc2_13_3; ctc2_14_4 {
	gte_SetRotMatrix(base);
}

:ldsvllrow0 base is lw_12_0 & base; lw_13_4; ctc2_12_8; ctc2_13_9 {
	gte_ldsvllrow0(base);
} 

:SetLightMatrix base is lw_12_0 & base; lw_13_4; ctc2_12_8; ctc2_13_9; lw_12_8; lw_13_12; lw_14_16; ctc2_12_10; ctc2_13_11; ctc2_14_12 {
	gte_SetLightMatrix(base);
}

:ldsvlcrow0 base is lw_12_0 & base; lw_13_4; ctc2_12_16; ctc2_13_17 {
	gte_ldsvlcrow0(base);
}

:SetColorMatrix base is lw_12_0 & base; lw_13_4; ctc2_12_16; ctc2_13_17; lw_12_8; lw_13_12; lw_14_16; ctc2_12_18; ctc2_13_19; ctc2_14_20 {
	gte_SetColorMatrix(base);
}

:SetTransMatrix base is lw_12_20 & base; lw_13_24; ctc2_12_5; lw_14_28; ctc2_13_6; ctc2_14_7 {
	gte_SetTransMatrix(base);
}

:ldtr RTsrc1,RTsrc2,RTsrc3 is ctc2_x_5 & RTsrc1; ctc2_x_6 & RTsrc2; ctc2_x_7 & RTsrc3 {
	gte_ldtr(RTsrc1,RTsrc2,RTsrc3);
}

:SetTransVector base is lw_12_0 & base; lw_13_4; lw_14_8; ctc2_12_5; ctc2_13_6; ctc2_14_7 {
	gte_SetTransVector(base);
}

:ld_intpol_uv0 base is lbu_12_0 & base; lbu_13_1; ctc2_12_21; ctc2_13_22 {
	gte_ld_intpol_uv0(base);
}

:ld_intpol_sv0 base is lh_12_0 & base; lh_13_2; lh_14_4; ctc2_12_21; ctc2_13_22; ctc2_14_23 {
	gte_ld_intpol_sv0(base);	
}

:ld_intpol_sv1 base is lh_12_0 & base; lh_13_2; lh_14_4; mtc2_12_9; mtc2_13_10; mtc2_14_11 {
	gte_ld_intpol_sv1(base);
}

:ldfc base is lw_12_0 & base; lw_13_4; lw_14_8; ctc2_12_21; ctc2_13_22; ctc2_14_23 {
	gte_ldfc(base);
}

:ldopv1SV base is lh_12_0 & base; lh_13_2; ctc2_12_0; lh_14_4; ctc2_13_2; ctc2_14_4 {
	gte_ldopv1SV(base);
}

:stsxy base is swc2_14_0 & base {
	gte_stsxy(base);
}

:stsxy3 base1,base2,base3 is swc2_12_0 & base1; swc2_13_0 & base2; swc2_14_0 & base3 {
	gte_stsxy3(base1,base2,base3);
}

:stsxy3c base is swc2_12_0 & base; swc2_13_4; swc2_14_8 {
	gte_stsxy3c(base);
}

:stsxy1 base is swc2_13_0 & base {
	gte_stsxy1(base);
}

:stsxy0 base is swc2_12_0 & base {
	gte_stsxy0(base);
}

:stsxy01 base1,base2 is swc2_12_0 & base1; swc2_13_0 & base2 {
	gte_stsxy01(base1,base2);
}

:stsxy01c base is swc2_12_0 & base; swc2_13_4 {
	gte_stsxy01c(base);
}

:stsxy3_f3 base is swc2_12_8 & base; swc2_13_12; swc2_14_16 {
    gte_stsxy3_f3(base);
}

:stsxy3_g3 base is swc2_12_8 & base; swc2_13_16; swc2_14_24 {
    gte_stsxy3_g3(base);
}

:stsxy3_gt3 base is swc2_12_8 & base; swc2_13_20; swc2_14_32 {
    gte_stsxy3_gt3(base);
}

:stdp base is swc2_8_0 & base {
    gte_stdp(base);
}

:stflg base is cfc2_12_31; nop1; sw_12_0 & base {
    gte_stflg(base);
}

:stflg_4 base is cfc2_12_31; addi_13_0_4; sll_13_13_16; and_12_12_13; sw_12_0 & base {
    gte_stflg_4(base);
}

:stsz base is swc2_19_0 & base {
    gte_stsz(base);
}

:stsz3 base1,base2,base3 is swc2_17_0 & base1; swc2_18_0 & base2; swc2_19_0 & base3 {
    gte_stsz3(base1,base2,base3);
}

:stsz4 base1,base2,base3,base4 is swc2_16_0 & base1; swc2_17_0 & base2; swc2_18_0 & base3; swc2_19_0 & base4 {
    gte_stsz4(base1,base2,base3,base4);
}

:stsz3c base is swc2_17_0 & base; swc2_18_4; swc2_19_8 {
    gte_stsz3c(base);
}

:stsz4c base is swc2_16_0 & base; swc2_17_4; swc2_18_8; swc2_19_12 {
    gte_stsz4c(base);
}

:stszotz base is mfc2_12_19; nop1; sra_12_12_2; sw_12_0 & base {
    gte_stszotz(base);
}

:stotz base is swc2_7_0 & base {
    gte_stotz(base);
}

:stopz base is swc2_24_0 & base {
    gte_stopz(base);
}

:stlvl base is swc2_9_0 & base; swc2_10_4; swc2_11_8 {
    gte_stlvl(base);
}

:stlvnl base is swc2_25_0 & base; swc2_26_4; swc2_27_8 {
    gte_stlvnl(base);
}

:stlvnl0 base is swc2_25_0 & base {
    gte_stlvnl0(base);
}

:stlvnl1 base is swc2_26_0 & base {
    gte_stlvnl1(base);
}

:stlvnl2 base is swc2_27_0 & base {
    gte_stlvnl2(base);
}

:stsv base is mfc2_12_9; mfc2_13_10; mfc2_14_11; sh_12_0 & base; sh_13_2; sh_14_4 {
    gte_stsv(base);
}

:stclmv base is mfc2_12_9; mfc2_13_10; mfc2_14_11; sh_12_0 & base; sh_13_6; sh_14_12 {
    gte_stclmv(base);
}

:stbv base is mfc2_12_9; mfc2_13_10; sb_12_0 & base; sb_13_1 {
    gte_stbv(base);
}

:stcv base is mfc2_12_9; mfc2_13_10; mfc2_14_11; sb_12_0 & base; sb_13_1; sb_14_2 {
    gte_stcv(base);
}

:strgb base is swc2_22_0 & base {
    gte_strgb(base);
}

:strgb3 base1,base2,base3 is swc2_20_0 & base1; swc2_21_0 & base2; swc2_22_0 & base3 {
    gte_strgb3(base1,base2,base3);
}

:strgb3_g3 base is swc2_20_4 & base; swc2_21_12; swc2_22_20 {
    gte_strgb3_g3(base);
}

:strgb3_gt3 base is swc2_20_4 & base; swc2_21_16; swc2_22_28 {
    gte_strgb3_gt3(base);
}

:ReadGeomOffset base1,base2 is cfc2_12_24; cfc2_13_25; sra_12_12_16; sra_13_13_16; sw_12_0 & base1; sw_13_0 & base2 {
    gte_ReadGeomOffset(base1,base2);
}

:ReadGeomScreen base is cfc2_12_26; nop1; sw_12_0 & base {
    gte_ReadGeomScreen(base);
}

:ReadRotMatrix base is cfc2_12_0; cfc2_13_1; sw_12_0 & base; sw_13_4; cfc2_12_2; cfc2_13_3; cfc2_14_4; sw_12_8; sw_13_12; sw_14_16; cfc2_12_5; cfc2_13_6; cfc2_14_7; sw_12_20; sw_13_24; sw_14_28 {
    gte_ReadRotMatrix(base);
}

:sttr base is cfc2_12_5; cfc2_13_6; cfc2_14_7; sw_12_0 & base; sw_13_4; sw_14_8 {
    gte_sttr(base);
}

:ReadLightMatrix base is cfc2_12_8; cfc2_13_9; sw_12_0 & base; sw_13_4; cfc2_12_10; cfc2_13_11; cfc2_14_12; sw_12_8; sw_13_12; sw_14_16; cfc2_12_13; cfc2_13_14; cfc2_14_15; sw_12_20; sw_13_24; sw_14_28 {
    gte_ReadLightMatrix(base);
}

:ReadColorMatrix base is cfc2_12_16; cfc2_13_17; sw_12_0 & base; sw_13_4; cfc2_12_18; cfc2_13_19; cfc2_14_20; sw_12_8; sw_13_12; sw_14_16; cfc2_12_21; cfc2_13_22; cfc2_14_23; sw_12_20; sw_13_24; sw_14_28 {
    gte_ReadColorMatrix(base);
}

:stlzc base is swc2_31_0 & base {
    gte_stlzc(base);
}

:stfc base is cfc2_12_21; cfc2_13_22; cfc2_14_23; sw_12_0 & base; sw_13_4; sw_14_8 {
    gte_stfc(base);
}

:mvlvtr is mfc2_12_25; mfc2_13_26; mfc2_14_27; ctc2_12_5; ctc2_13_6; ctc2_14_7 {
    gte_mvlvtr();
}

:subdvl base1,base2,base3 is lw_12_0 & base1; lw_13_0 & base2; mtc2_12_9; mtc2_13_10; sra_12_12_16; sra_13_13_16; subu_15_12_13; mfc2_12_9; mfc2_13_10; sw_15_4 & base3; subu_12_12_13; sw_12_0 {
    gte_subdvl(base1,base2,base3);
}

:subdvd base1,base2,base3 is lw_12_0 & base1; lw_13_0 & base2; mtc2_12_9; mtc2_13_10; sra_12_12_16; sra_13_13_16; subu_15_12_13; mfc2_12_9; mfc2_13_10; sh_15_2 & base3; subu_12_12_13; sh_12_0 {
    gte_subdvd(base1,base2,base3);
}

:adddvl base1,base2,base3 is lw_12_0 & base1; lw_13_0 & base2; mtc2_12_9; mtc2_13_10; sra_12_12_16; sra_13_13_16; addu_15_12_13; mfc2_12_9; mfc2_13_10; sw_15_4 & base3; addu_12_12_13; sw_12_0 {
    gte_adddvl(base1,base2,base3);
}

:adddvd base1,base2,base3 is lw_12_0 & base1; lw_13_0 & base2; mtc2_12_9; mtc2_13_10; sra_12_12_16; sra_13_13_16; addu_15_12_13; mfc2_12_9; mfc2_13_10; sh_15_2 & base3; addu_12_12_13; sh_12_0 {
    gte_adddvd(base1,base2,base3);
}

:FlipRotMatrixX is cfc2_12_0; cfc2_13_1; sll_14_12_16; sra_14_14_16_1; subu_14_0_14_1; sra_15_12_16; subu_15_0_15; sll_15_15_16_1; sll_14_14_16_1; srl_14_14_16_1; or_14_14_15_1; ctc2_14_0; sll_14_13_16; sra_14_14_16_2; subu_14_0_14_2; sra_15_13_16; sll_15_15_16_2; sll_14_14_16_2; srl_14_14_16_2; or_14_14_15_2; ctc2_14_1 {
    gte_FlipRotMatrixX();
}

:FlipTRX is cfc2_12_5; nop1; subu_12_0_12; ctc2_12_5 {
    gte_FlipTRX();
}


# -------------------------------------- GTENOM_H

define pcodeop read_sz_fifo3;
define pcodeop read_sz_fifo4;
define pcodeop read_szx;
define pcodeop read_sz0;
define pcodeop read_sz1;
define pcodeop read_sz2;
define pcodeop read_sxsy_fifo3;
define pcodeop read_sxsy0;
define pcodeop read_sxsy1;
define pcodeop read_sxsy2;
define pcodeop read_rgb_fifo;
define pcodeop read_rgb0;
define pcodeop read_rgb1;
define pcodeop read_rgb2;
define pcodeop read_flag;
define pcodeop read_p;
define pcodeop read_otz;
define pcodeop read_opz;
define pcodeop read_mt;
define pcodeop store_sxsy_fifo3;
define pcodeop store_sxsy0;
define pcodeop store_sxsy1;
define pcodeop store_sxsy2;
define pcodeop store_rgb_fifo;
define pcodeop store_rgb0;
define pcodeop store_rgb1;
define pcodeop store_rgb2;
define pcodeop set_trans_matrix;

:read_sz_fifo3 RT1,RT2,RT3 is mfc2_x_17 & RT1; mfc2_x_18 & RT2; mfc2_x_19 & RT3 {
	read_sz_fifo3(RT1,RT2,RT3);
}

:read_sz_fifo4 RT1,RT2,RT3,RT4 is mfc2_x_16 & RT1; mfc2_x_17 & RT2; mfc2_x_18 & RT3; mfc2_x_19 & RT4 {
	read_sz_fifo4(RT1,RT2,RT3,RT4);
}

:read_sxsy_fifo3 RT1,RT2,RT3 is mfc2_x_12 & RT1; mfc2_x_13 & RT2; mfc2_x_14 & RT3 {
	read_sxsy_fifo3(RT1,RT2,RT3);
}

:read_rgb_fifo RT1,RT2,RT3 is mfc2_x_20 & RT1; mfc2_x_21 & RT2; mfc2_x_22 & RT3 {
	read_rgb_fifo(RT1,RT2,RT3);
}

:read_mt RT1,RT2,RT3 is mfc2_x_25 & RT1; mfc2_x_26 & RT2; mfc2_x_27 & RT3 {
	read_mt(RT1,RT2,RT3);
}
